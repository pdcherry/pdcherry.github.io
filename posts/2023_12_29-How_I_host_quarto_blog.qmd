---
title: "How I run and deploy this Quarto blog"
author: "Patrick Cherry"
date: "2023/12/29"
categories:
  - news
  - code
  - community
image: "2023_12_29-How_I_host_quarto_blog/2023_12_29-How_I_host_quarto_blog.jpg"
execute:
  freeze: true
---
```{r setup, include = FALSE, message = FALSE, echo = FALSE}
library(reticulate)
```

I started a blog! Isn't that grand!?

![Rolling my own](2023_12_29-How_I_host_quarto_blog/2023_12_29-How_I_host_quarto_blog.jpg)

## Why do I want to blog?
I've always had a lot of thoughts and opinions on many topics. And when I have a thought, idea, or opinion I really want to develop, I often use writing (privately, for myself) as an exercise for exploring, evaluating, and making more rigorous the thought.

> When I sit down to write a book, I do not say to myself, ‘I am going to produce a work of art.’ I write it because there is some lie that I want to expose, some fact to which I want to draw attention, and my initial concern is to get a hearing.
>
>-George Orwell, ["Why I Write"](https://www.orwellfoundation.com/the-orwell-foundation/orwell/essays-and-other-works/why-i-write/)

I suppose I'm passionate about some topics, some of which are clearly in my lane (*e.g.* Molecular Biology, Photography), and some of which are veering for me (*e.g.* Economics, Finance, Business Trends). That being said, I feel a duty as a scientist to explore these ideas honestly and with every intent of uncovering truth—especially to a standard that would meet those of the scientific community or journalism community.

And most practically, I sometimes need more space to discuss an idea than is allowed in a tweet or mastodon post. (And those threads never seem to fully connect, anyway.)

## Introduction to self-hosted blogging
#### Which is really an introduction to the publishing ecosystem
I have chosen to set up a self-hosted blog for many reasons. Self hosting has always seemed like the platonic ideal of a technically capable individual, and so I have set out to manifest this idea as a weekend project. As I will describe below, the default state of this is not ideal, and I've learned a lot about git, Github, Github Actions, Rmarkdown, Quarto, YAML, and TOML along the way.

Self hosting doesn't literally mean I have set up a server in my office nook or anything so physically present. Self hosting just means I'm using my own html to render the content you see on the webpage before you. But why might that be worth it?

The state of online publishing today is a morass, to say the least. Some problems are quotidian, such as not being able to view a blog page without being bombarded with obnoxious popovers asking to log in, subscribe on the platform, or subscribe to the newsletter by email. Worse, the economics of [certain high-profile blogging platforms](https://www.nytimes.com/2021/04/11/business/media/substack-newsletter-competition.html?searchResultPosition=12) recruiting  writers to post their content there for a six-figure salary requires such platforms, in turn, to either monetize charge other, 'lesser' subscribers or readers. With leadership that doesn't recognize how the mass-dissemination of hate speech can be a threat to democracy, platforms can [accrue a hate speech problem](https://www.theatlantic.com/ideas/archive/2023/11/substack-extremism-nazi-white-supremacy-newsletters/676156/), and be [financially motivated to keep it](https://www.businessinsider.com/substack-nazi-problem-free-speech-money-analysis-2023-12?op=1).

Self-hosted blogging side-steps a lot of these problems. By self-hosting, I can craft a good web experience for the reader: no ads and no obnoxious popovers. I can post content without supporting these ethically dubious platforms with more content and more users (which would then be subjected to their recommendation algorithm). Should I devote the time, I could add an RSS feed, which is reminiscent of the time when all publications (aka blogs) were easily available and sync-able and readable as you wish: kind of like how podcasts *still* are today. (Can we make [NetNewsWire](https://netnewswire.com/) relevant again?)

Plus, Quarto and Hugo makes for a blazing fast-loading website. __How cyber-punk is that?!__

## Why Quarto
Why would I choose Quarto as the mechanism of munging my writing and coding into a website? Well, the question partly answers itself.

__I write tons of R markdown scripts already.__ [R Markdown](https://rmarkdown.rstudio.com/) is a display wrapper language that allows for the execution of code in "chunks". It makes for beautiful documents and reports where the code, figures/tables, and descriptions are fully self-contained for reproducible data analysis. The outputs can be useful and beautiful: as simple as a 1-page PDF, or as interactive as a Shiny web application.
 
__I already have my data-driven resume in R Markdown.__ So I have some experience manipulating the rendering code to make documents pretty and multi-output compatible (e.g. PDF, Github Markdown, html). And, in theory, these documents should be easily compatible when translated into a website / blog.

__I plan on posting lots of analysis and code, and the outputs.__ I have been, on occasion, posting these analyses to my github project repos, like for [statistics](https://github.com/pdcherry/statistics), [scRNA-seq](https://github.com/pdcherry/scRNAseq-vignettes), or [bulk RNA-seq](https://github.com/pdcherry/GTEX-RNA-seq-liver). Having a proper blog will be a great home to host all these posts together, and their future posts I can even tag them, so readers who are interested in one type can keep focused on posts of that topic.

__[Quarto](https://quarto.org/) is the next generation of scientific publishing systems__, following-up where R Markdown left off. Quarto natively renders to HTML, PDF, MS Word, ePub (all by *first* passing through Pandoc, one of the most widely-supported markdown systems). And Quarto natively supports running Python, R, Julia, and Observable JS code, because yes, contrary to popular belief, I can code in Python. (Also, I may mess around with Observable JS in the future; it sounds nice for dashboards and interactive web data explorations.)

## Deploying without weirdness (The road less trodden) {#sec-road-less-trodden}
But, it turns out, [Quarto's own recommended](https://quarto.org/docs/websites/website-blog.html) implementation of a "Quarto Blog" involves some weird git and deploy mechanics. Quarto recommends either rendering the HTML locally and pushing it to git (using the `quarto publish` shell command), or setting up a GitHub action.

 - The "render HTML locally and push" option is not optimal, because it makes for a very large git repo with large changes for even small updates, all of which are generated programmatically from the Quarto code.
 - The `quarto publish` shell command creates a new branch of the repo to contain the HTML pages (still checking HTML into git), but this branch is never supposed to be merged with the main/HEAD branch. (Furthermore, it cannot be merged, because it is not descended from the main branch, and contains no copies of files in it main branch.)
 - The last option, which is [Quarto's recommended Github Action](https://quarto.org/docs/publishing/github-pages.html#publish-command), still carries out code execution in the Action, requiring a fully copy of the R environment that solves for all possible code/projects ever run. I got many failures on installing `reticulate` to the docker image just so I could say `print('Hello, world')` using Python. Even more annoyingly, `Rmarkdown` was required to evaluate some code chunks. Both `reticulate` and `Rmarkdown` are notoriously difficult and long to install to a new environment.

::: {.callout-note}
## Since June of 2024, I have made some changes to render and deploy
As of June 22, 2024, I realized that the specifics were different than I described in this section. The following section (@sec-update-render-deploy) for details on the update.
:::

[Ian Taylor notes this in his blog post about GitHub actions](https://www.ianmtaylor.net/posts/2022/deploy-quarto-to-github-pages/). So, similarly to Ian, I added `execute: freeze: auto` lines to this blogs _quarto.yml so that 100% of Quarto would be pre-executed locally on my machine, and only if it changed. And those pre-rendered results are committed to git. Thus, this allows for the Github Action to be very sparse, only requiring an installation of Quarto on the shell PATH. From there, Quarto renders the HTML from the frozen quarto documents, and deploys it to Github Pages with an artifact transfer. The GitHub action takes ~ 45 seconds to deploy the site, and my locally run render takes less than 10 seconds. Nice!

### Rolling your own
I learned a lot from this adventure. From troubleshooting those malfunctioning Github Action deploys for so long, it really struck me that for this blog, as is so often the case in life, in the outdoors, and in data science, the road less traveled is sometimes a road more suitable. And with good documentation, it's not too bad to implement.

```{r}
print("Hello, world")
```

```{python warning = FALSE}
print('Hello, world')
```

## 2024-06-22 Update on workings of render and deploy {#sec-update-render-deploy}
In June of 2024, I was reviewing the `.github/workflows` files and the logs of the GitHub actions, and realized that I was doing *none* of the publish and deploy paths I had described above (@sec-road-less-trodden).

 - In contrast to bullet point 1, I *am* rendering the HTML locally (by virtue of the bash `quarto render` command, which outputs the HTML site artifact to the `/docs` directory). Then, this version of the repository gets committed to git, and ultimately pushed to GitHub. __Thus, I am checking programmatically generated / rendered content into git__, in contrast to my previous plan.
   - ![Screen capture of GitHub repository languages breakdown](2023_12_29-How_I_host_quarto_blog/2024_06_22-gh_repo_languages.png){width=40% fig-align="left"}
 - In contrast to bullet point 2, I do commit the HTML to git (including the main / HEAD branch).
 - I am following bullet point 3. No notes to past Patrick; even with more experience, I still can't imagine installing reticulate to a virtual machine on a compute node just to publish the next version of a blog.

My GitHub `publish.yml` action workflow is very sparse due to entirely local execution and rendering, far more sparse than [whatever Quarto has recommended](https://quarto.org/docs/publishing/github-pages.html). For example, the `publish.yml` of this blog doesn't even install / activate quarto on the compute node, because no quarto rendering processes are needed.

While it is inelegant (and against best practice of avoiding committing programmatically-generated code), I find committing the HTML very simple, and so I go with this. (This decision may not be best for everyone else.) I don't use the `quarto publish` command or a different branch for the HTML.

 - Pro: This keeps it simple (one command to publish to the web), and it also keeps the published version aligned with the GitHub-hosted `main` branch: each push represents a publication event.
 - Con: In order to store or back-up an intermediate piece of writing or analysis, I have to keep the start of the .qmd file labeled as "XXXX-XX-XX"; those files are excluded from the render, which I enforce as with the line of code `render: - "!*xxxx_xx_xx*"` in the `_quarto.yml` file.
   - I'm a little cagey about putting unfinished work in publicly-visible git repositories anyway, so these files are typically very close to being ready for publication. (I rely on local backups, like using Apple's OS X Time Machine and Proton Drive to back up works-in-progress, as well as other, independent, and private GitHub repos on a project-specific basis.)

So it works! This process get the job done on a good enough basis for me, and has stood up to numerous updates to the blog, including new analysis posts with packages that were novel to me at the time. What a nice win for streamlined science communication.
