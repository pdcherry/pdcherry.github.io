---
title: "emmeans: estimated marginal means"
author: "Patrick Cherry"
date: "2024-05-19"
categories:
  - data
  - code
  - experimental analysis
  - unbalanced DoE
  - causal inference
bibliography: "2024_05_19-emmeans_estimated_marginal_means.bib"
image: "2024_05_19-emmeans_estimated_marginal_means_dir/2024_05_19-emmeans_diff_plot.png"
format:
  html:
    df-print: kable
execute:
  freeze: TRUE
  echo: TRUE
editor_options: 
  chunk_output_type: inline
---
<!-- improved plot, added table illustrating EMM OMM differences -->

![The diet of pigs contributes to their rate of growth and macromolecular composition. Photo reproduced here from m_takahashi under CC BY-ND 2.0 Deed Attribution-NoDerivs 2.0 Generic](2024_05_19-emmeans_estimated_marginal_means_dir/2024_05_19-emmeans_estimated_marginal_means_pigs_cc.jpg)

```{r, setup, echo = FALSE, message = FALSE}
knitr::opts_chunk$set(echo = TRUE)  # set default chunk option to print the code that generated that output
#options(knitr.table.format = 'markdown') # render kable tables in md for github, comment out otherwise
caption_def <- "2024-05-01 emmeans estimated marginal means"
exp_imp_path <- "./2024-03-10_emmeans_data/"
```

# Introduction to marginal means
Estimated marginal means (EMMs, previously known as least-squares means in the context of traditional regression models) are derived by using a model to make predictions over a regular grid of predictor combinations (called a reference grid) [@Searle1980]. Estimated marginal means have historically been used commonly in agricultural science publications. [Russ Lenth](https://stat.uiowa.edu/people/russell-v-lenth) authored the `emmeans` package (distributed [on CRAN](https://cran.r-project.org/web/packages/emmeans/)) to be an implementation of the "least-squares" means (which Lenth prefers to call "marginal means" for the reasons discussed below) in R.

As Searle, _et al._ write, there is a **marginal mean** for every variable (and every level of factor variables) in a data set, and a sufficiently defined model (be it a linear model (`lm`), `glm`, `lmer`, or `glmer` _etc_.) will allow for those marginal means to be estimated.

### _Ceteris paribus_
But I just used "marginal" in the definition of "estimated marginal means." So what does marginal signify? To distill it down, a marginal mean is the effect size that a particular variable contributes, _all else being equal_. (The all else being equal part comes from accounting for all other _significant_ effects in the model.)

There are many advantages to using estimated marginal means to arrive at effect sizes (as well as confidence intervals) for a multi-factor / multi-level _experiment_.

  1. One challenge where EMMs provide real advantage is when the number of subjects / samples per condition are not all the same or close to the same; this situation is called an "unbalanced experiment," and it occurs often during large [Designs of Experiment (DoEs)](/posts/2024_04_05-DoE_design_of_experiment.html), either intentionally by design, or unintentionally due to experimental sample drop outs. EMMs can provide accurate estimates of means and standard errors (confidence intervals) for conditions that differ in sample size, such that, all else equal, conditions with a smaller _n_ have wider confidence intervals.
  1. Another advantage is when there is a hypothesized (or evident) interaction effect in either the mean or the spread of one or more conditions in the experiment. EMMs can estimate accurate relative effects and standard errors (confidence intervals) for each of those interactions.

### Note on using EMMs for _experiments_
::: {#EMMs-for-experiments .callout-note}
### EMMs are best used on data obtained from controlled experiments.
EMMs are less applicable to observational data.
:::

A _[ceteris paribus](https://en.wikipedia.org/wiki/Ceteris_paribus)_ (all else being equal) assumption is often critical to drawing scientific conclusions, because scientists seek to infer cause by ruling out all other possible influences. The "else" in "all else equal" distills both:

 1. **the scientific idea of a controlled experiment**, wherein variables being tested are altered precisely and systematically, and variables _not_ being tested are held constant for all samples in the experiment;
 1. and **the statistical idea of marginal**, which is the relative change from an arbitrary starting point. Marginal statistics show what change or influence can be expected if we know one variable is changing---but know no other information about the condition.

Thus, a marginal effect, or a marginal mean, is a _causal_ statement that says, on the margin (all else being equal), if a variable changes in this way, the average response _due to that one change_ is this much [@hernan2010causal].

# The pigs dataset
Consider the pigs dataset provided with the package (`help("pigs")` provides details). These data come from an experiment where pigs are given different percentages of protein (percent) from different sources (source) in their diet, and later the concentration (conc) of free plasma leucine, in mcg/mL, was measured. (Observations 7, 22, 23, 31, 33, and 35 have been omitted, creating a more notable imbalance. [@oehlert2010first]) The percent values are quantitative, but the experimenter chose those particular values deliberately (like a DoE), and (at least initially) the experimenter wants separate estimates at each percent level; that is, in this case, percent is a factor, not a quantitative predictor.

## Initial model fitting
```{r, message = FALSE, warning = FALSE}
library(tidyverse)          # dplyr, ggplot2, etc.
theme_set(theme_light())    # set default themes for ggplot in this doc to add contrast
library(broom)              # help tidy display and compare of model summary stats
library(emmeans)            # ~~The estimated marginal means package~~
library(patchwork)          # for combining plots
library(modelbased)         # https://easystats.github.io/modelbased/articles/estimate_means.html
```

Our first task is to come up with a good model. Making sure the model is appropriate for the data, experiment, and underlying scientific processes is critical to drawing valid conclusions with `emmeans`. Constructing good models is equal parts art and science, but I won't labor too much over the details; any reader is encouraged to seek more in-depth guidance on model construction and evaluation. I will construct and view some models and settle on one of them. The key model diagnostics I will keep an eye on are:

 - AIC
 - BIC
 - r-squared
 - Residuals vs Fitted (appropriate model)
 - Scale-Location ([homoscedasticity](https://en.wikipedia.org/wiki/Homoscedasticity_and_heteroscedasticity))
 - Residuals vs Leverage (outliers / overly-influential points)

```{r warning = FALSE}
mod1 <- lm(conc ~ source * factor(percent), data = pigs)
par(mfrow = c(2,2)); plot(mod1)
```

```{r}
mod2 <- update(mod1, . ~ source + factor(percent))   # no interaction
par(mfrow = c(2,2)); plot(mod2)
```

```{r}
map_dfr(list(mod1, mod2), glance, .id = "model")
```

These models have R2 values of 0.808 and 0.700, and adjusted R2 values of 0.684 and 0.634. mod1 is preferable to mod2, suggesting the interaction term is needed. However, a residual-vs-predicted plot of mod2 has a classic “horn” shape (curving and fanning out), indicating a situation where a response transformation might help better than including the interaction.

After trial and error, it turns out that an inverse (reciprocal) transformation, (1/conc) serves really well. (Perhaps this isn’t too surprising, as concentrations are often determined by titration, in which the actual measurements are volumes of some counter-reactant; and these are reciprocally related to concentrations, i.e., amounts per unit volume.) In a real experiment, I would read the experimental protocol to verify this idea, or speak with the scientist conducting the experiment.

So here are three more models:
```{r}
mod3 <- update(mod1, inverse(conc) ~ .)
mod4 <- update(mod2, inverse(conc) ~ .)     # no interaction
mod5 <- update(mod4, . ~ source + percent)  # continuous (non-factor) term for percent
par(mfrow = c(2,2)); plot(mod5)
```

```{r}
map_dfr(list(mod1, mod2, mod3, mod4, mod5), glance, .id = "model")
```

::: {#reciprocal-fun-model .callout-tip}
I could have used `1/conc` as the response variable, but `emmeans` provides an equivalent `inverse()` function that will prove more advantageous later.
:::

The residual plots for these models look a lot more like a random scatter of points (and that is good). The R^2 values for these models are 0.818, 0.787, and 0.749, respectively; and the adjusted R^2s are 0.700, 0.740, and 0.719. mod4 has the best adjusted R^2 and will be our choice.

# Estimated marginal means
```{r}
(EMM.source <- emmeans(mod4, specs = "source"))
```

```{r}
(EMM.percent <- emmeans(mod4, specs = "percent"))
```

Calling `tidy()` (from `broom`) on the object will put it into a beautiful data frame. And data frames can be plotted.

The input type can be set to `“response”`, indicating that values should be back-transformed. Note that the back-transformation is done as the last step, so all tests are conducted on the transformed scale.

The package `emmeans` supports `confint` (confidence intervals) and `test` (hypothesis testing) using a function parameter called `type`. The parameter `type` only has an effect if there is a known transformation or link function. The parameter value `"response"` specifies that the inverse transformation be applied, and in that case, the reported values (estimates, standard errors, confidence intervals) will be on the original response scale; otherwise, the output is on the non-linear predictor scale, as defined in the formula for the regression.

```{r}
tidy(confint(EMM.percent, type = "response"))
```

```{r}
tidy(confint(EMM.percent, type = "response")) %>%
  ggplot(aes(y = response, x = percent)) +
  geom_col(width = 1) +
  geom_errorbar(width = 0.5,
                aes(ymin = conf.low,
                    ymax = conf.high)) +
  labs(title = "Marginal effect with confidence intervals",
       y = "response, free plasma leucine (µg/mL)",
       x = "percent of source protein in diet (%)")
```

```{r}
emmeans::test(EMM.percent, type = "response")
```

## Comparison to ordinary means
Let’s compare these with the ordinary marginal means (OMMs) on inverse(conc):

```{r}
with(pigs, tapply(inverse(conc), source, mean))
```

The above code is [in the style of](https://www.rostrum.blog/posts/2024-05-08-aesthetic/) base R [@Dray2024]. Can I write the above ordinary means in Tidyverse/dplyr language?
```{r}
pigs %>%
  mutate(conc = inverse(conc)) %>%
  summarize(mean = mean(conc),
            "n" = n(),
            .by = source)
```

```{r}
with(pigs, tapply(inverse(conc), percent, mean))
```

```{r}
pigs %>%
  mutate(conc = inverse(conc)) %>%
  summarize(mean = mean(conc),
            "n" = n(),
            .by = percent)
```

Both sets of OMMs are vaguely similar to the corresponding EMMs. However, please note that the EMMs for percent form a decreasing sequence, while the the OMMs decrease but then increase at the end.

# The reference grid, and definition of EMMs
Estimated marginal means are defined as marginal means of model predictions over the grid comprising all factor combinations---called the reference grid. For the example at hand, the reference grid is

```{r}
emmeans::ref_grid(mod4)
```

```{r}
(RG <- expand.grid(source = levels(pigs$source), percent = as_factor(unique(pigs$percent))))
```

To get the EMMs, I first need to obtain predictions on this grid:

```{r}
(preds <- matrix(predict(mod4, newdata = RG), nrow = 3))
```

then obtain the marginal means of these predictions:
```{r}
apply(preds, 1, mean)   # row means for source
```

::: aside
For further reading on the family of R's `apply` functions, see [Guru99's great summary](https://www.guru99.com/r-apply-sapply-tapply.html).
:::

```{r}
apply(preds, 2, mean)   # column means for percent
```

These marginal averages match the EMMs obtained earlier via `emmeans()`.

Now let’s go back to the comparison with the ordinary marginal means. The source levels are represented by the columns of `pred`; and note that each row of `pred` is a decreasing set of values. So it is no wonder that the marginal means---the EMMs for source---are decreasing. That the OMMs for percent do not behave this way is due to the imbalance in sample sizes:

```{r}
with(pigs, table(source, percent));
nrow(pigs) / nrow(RG)
```

`table` uses factors to build a contingency table of the counts at each combination of factor levels.

The mean number of samples per condition is 2.42, so any source * percent condition with greater than 2.42 has greater than average weighting in the OMM, whereas those with below 2.42 observations has below the average weighting.

The alarming observation that two conditions have only one observation (soy @ 18% and skim @ 18%) show that those effects, while they may be reported as "means," are really just one observation, a situation which is more susceptible to bias.

```{r}
emmeans::emmip(mod4, source ~ percent, type = "response") +
  labs(title = "EMM: Estimated marginal means result");
ggplot(summarize(pigs, "conc" = mean(conc), .by = c("percent", "source")),
      aes(y = conc, x = percent, color = source)) +
  geom_line() +
  labs(title = "OMM: Ordinary grouped means result")
```

```{r}
pigs_sample_n <- pigs %>%
  mutate("percent" = as_factor(percent)) %>%
  count(percent, source)

combined_omm_emm_data <- pigs %>%
  mutate("percent" = as_factor(percent)) %>%
  summarize("conc" = mean(conc), .by = c("percent", "source")) %>%
  bind_rows(
    bind_cols(RG,
              inverse(predict(mod4, newdata = RG, interval = "confidence", level = 0.95)) %>%
                as_tibble() %>%
                dplyr::rename("conc" = fit)
              ),
    .id = "analysis") %>%
  mutate("analysis" = case_when(analysis == 1 ~ "OMM",
                                analysis == 2 ~ "EMM")) %>%
  left_join(pigs_sample_n, by = c("percent", "source"))
```

As seen in the above code, I can also use the `predict()` function to calculate confidence intervals for the marginal means. To do this, I need to specify the `interval` argument, which can take two values: `"confidence"` and `"prediction"` [@Sanderson2023].

A confidence interval is the range of values within which we are confident that the true mean of the population will fall. A prediction interval is the range of values within which we are confident that the true value of a new observation will fall. Thus, for comparing the EMM to the OMM, a confidence interval is appropriate because we are comparing means, not individual observations.

```{r}
combined_omm_emm_plot <- combined_omm_emm_data %>%
  ggplot(aes(y = conc, x = percent, color = source, linetype = analysis)) +
  geom_line(aes(group = interaction(source, analysis))) +
  geom_point(aes(size = n)) +
  geom_errorbar(aes(ymin = upr, ymax = lwr),
                width = 0.1, alpha = 0.5) +
  scale_color_viridis_d(option = "D", end = 0.8) +
  scale_size_continuous(range = c(2,4.5)) +
  facet_wrap(~ source) +
  labs(subtitle = "Overlay of EMM and ordinary means analysis",
       y = "response, free plasma leucine (µg/mL)",
       x = "percent of source protein in diet (%)",
       size = "sample n",
       caption = "Error bars are for EMMs.")
combined_omm_emm_plot
```

```{r, eval = FALSE, include = FALSE}
ggsave("2024_05_19-emmeans_estimated_marginal_means_dir/2024_05_19-emmeans_diff_plot.png",
       combined_omm_emm_plot,
       width = 5, height = 4, dpi = 320)
```

Overlaying the data using some custom code to tidy up the combining of both EMM and OMM data into one plottable frame shows how the ordinary marginal (_i.e._ grouped) means deviate from the Estimated Marginal Means when there are fewer individual observations (n = 1 for soy @ 18% and n = 1 for skim @ 18%, which happens to deviate the farthest). Those low-n observations are displayed as smaller dots, whereas the other conditions have 2 or 3, which get plotted as larger dots.

Note that where the ordinary marginal means diverge away from the estimated marginal means, the EMM confidence interval is also wide, ultimately leading to the ordinary mean being within the confidence interval. This observation shows that the model (and its predictions) are consistent with the data. These confidence intervals are not calculated when doing ordinary means analysis.

```{r}
combined_omm_emm_data %>%
  pivot_wider(id_cols = c("source", "percent", "n"),
              names_from = "analysis",
              values_from = c("conc", "lwr", "upr")) %>%
  select(where(~ sum(!is.na(.x)) >= 1)) %>%
  mutate("EMM_CI_width" = lwr_EMM - upr_EMM,
         "EMM_pct_uncertainty" = round(EMM_CI_width / conc_EMM * 100, 1),
         "OMM_EMM_pct_diff" = round((conc_OMM - conc_EMM) / conc_EMM * 100, 1)) %>%
  relocate(EMM_pct_uncertainty, OMM_EMM_pct_diff, .after = conc_EMM)
```

The EMMs vs OMMs tend to differ more for smaller sample sizes (n). The confidence intervals also tend to be wider for the `lm` predictions on the lower sample size conditions in the experiment, and these tend to correlate with the difference between the OMM (ordinary marginal mean) and the EMM (estimated marginal mean), as the table above shows.

EMMs worked well for us. The application of a linear model (and a linearizing transformation of the response scale) allows for the balanced _reference grid_ to get balanced estimated means for each effect. This process produced more balanced estimated means than the ordinary means taken from the grouped-by factor levels.

Given the good fit of the model, I would trust these EMMs more than the ordinary grouped-by means. Plus, the linear model gives us confidence intervals for each estimated marginal effect, to which statistical analysis can be applied.

# Conclusions
In summary, I obtained a reference grid of all factor combinations, obtained model predictions on that grid, and then I estimated the expected marginal means as equally-weighted marginal averages of those predictions. Those EMMs are not subject to confounding by other factors or biased sampling, such as might happen with ordinary marginal means of the data. Moreover, unlike OMMs, EMMs are based on a model that is well-fitted to the data.

# References

::: {#refs}
:::
