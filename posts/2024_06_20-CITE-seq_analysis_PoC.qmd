---
title: "CITE-seq analysis proof-of-concept"
author: "Patrick Cherry"
date: "June 20, 2024"
categories:
  - multi-modal analysis
  - CITE-seq
  - scRNA-seq
  - code
  - data
image: "2024_06_20-CITE-seq/tsne_rna_adtClusters.png"
format:
  html:
    df-print: kable
execute:
  freeze: TRUE
  echo: TRUE
editor_options: 
  chunk_output_type: inline
---

## Intro
CITE-seq is a method developed at the New York Genome Center for adding phenotypic data in the form of cell-surface protein expression to the RNA expression data that comes from single-cell RNA sequencing [Nat Methods 14, 865–868 (2017)](https://www.nature.com/articles/nmeth.4380). This is accomplished by incubating the cells with DNA oligonucleotide bar-coded antibodies that recognize epitopes on cell surface proteins, and then perform single-cell sequencing. The DNA-tags of the antibodies get indexed using the oligo-dT primers on the beads of the single-cell emulsion, allowing the antibody-derived tags to be mapped back to the scRNA-seq data of the single cells. Thus, RNA expression data and cell-surface protein data can be combined in one experiment for a multi-omics analysis.

### This experiment
CITE-seq using data from Stoeckius, et al. (Nat Methods 14, 865–868 (2017) 10.1038/nmeth.4380) obtained from GEO series GSE100866.

Seurat multi-modal clustering will be used to cross-validate the cell-surface protein data with the RNA-seq data using a purposely-mixed two-species (human and mouse) immune cell sample.

<!-- https://cran.r-project.org/web/packages/dsb/vignettes/end_to_end_workflow.html -->
<!-- https://broadinstitute.github.io/2020_scWorkshop/cite-seq.html -->

### Methods Intro
From [Supplementary Figure 1 CITE-seq library preparation](https://www.nature.com/articles/nmeth.4380#Sec18):

 > Illustration of the DNA-barcoded antibodies used in CITE-seq. (b) Antibody-oligonucleotide complexes appear as a high-molecular-weight smear when run on an agarose gel (1). Cleavage of the oligo from the antibody by reduction of the disulfide bond collapses the smear to oligo length (2). (c) Drop-seq beads are microparticles with conjugated oligonucleotides comprising a common PCR handle, a cell barcode, followed by a unique molecular identifier (UMI) and a polyT tail. (d) Schematic illustration of CITE-seq library prep in Drop-seq (downstream of Fig. 1b). Reverse transcription and template switch is performed in bulk after emulsion breakage. After amplification, full length cDNA and antibody-oligo products can be separated by size and amplified independently (also shown in d) (e) Reverse transcription and amplification produces two product populations with distinct sizes (left panel). These can be size separated and amplified independently to obtain full length cDNAs (top panel, capillary electrophoresis trace) and ADTs (bottom panel, capillary electrophoresis trace).

```{r setup, echo = FALSE, message = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = TRUE)
library(patchwork)
library(fs)
library(here)
library(Seurat)
library(Matrix)
library(testthat)
theme_set(theme_light())
out_path <- fs::path(here(), "posts", "2024_06_20-CITE-seq")
file_prefix <- "CITE-seq"
data_dir <- fs::path("~/", "pdcherry_github_data", "CITE-seq_data", "GSE100866")
```
```{r}
fs::dir_ls(data_dir) |> fs::path_file()
```

```{r}
path(out_path, file_prefix)
```

```{r eval = FALSE}
#| eval: FALSE
source("CITE-seq_data_fetch.R")
```
```{r}
cat(readLines(fs::path(out_path, "CITE-seq_data_fetch.R")), sep = "\n")
```

## Read in data
### count data
```{r}
cbmc_rna <-
  as.sparse(
    read.csv(
      path(data_dir, "GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz"),
      sep = ",", header = TRUE, row.names = 1))
```
```{r}
dim(cbmc_rna)
```

`dim()` outputs (columns, rows); the CBMC matrix (cord blood mono-nuclear cells) contains 36280 features and 8617 samples (single cell droplets).

```{r}
cbmc_rna <- CollapseSpeciesExpressionMatrix(cbmc_rna,
                                            prefix = "HUMAN_", controls = "MOUSE_",
                                            ncontrols = 100)
```
```{r}
dim(cbmc_rna)
```
 
`CollapseSpeciesExpressionMatrix()` is a convenience function for slimming down a multi-species expression matrix, when only one species is primarily of interest. Given the default parameter of `ncontrols = 100`, this command keeps only the top 100 features detected from each species in each sample. This matrix went from 36280 to 20501 features, which is a 43% reduction.

### ADT UMI matrix
```{r}
cbmc_adt <-
  as.sparse(
    read.csv(
      path(data_dir, "GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz"),
      sep = ",", header = TRUE, row.names = 1))
```
```{r}
dim(cbmc_adt)
```

#### Quick matrix QC
```{r test UMI counts of rna and adt matrices}
testthat::expect_equal(dim(cbmc_rna)[2] == dim(cbmc_adt)[2],
                       TRUE)
```

The number of rows (samples / UMIs) matches the RNA counts matrix; we have corresponding sample data.

```{r}
length(intersect(colnames(cbmc_rna), colnames(cbmc_adt))) /
  length(union(colnames(cbmc_rna), colnames(cbmc_adt)))
```

And the names of the samples all match.

## Seurat object & cluster
```{r}
cbmc <- CreateSeuratObject(counts = cbmc_rna)
```
```{r}
cbmc <- NormalizeData(cbmc)
```
```{r}
cbmc <- FindVariableFeatures(cbmc)
```
```{r}
cbmc <- ScaleData(cbmc)
```

```{r}
#| label: fig-cbmc-elbowplot
#| fig-cap: Elbow plot or scree plot of principle components computed from scRNA-seq counts

cbmc <- RunPCA(cbmc, verbose = FALSE)
ElbowPlot(cbmc, ndims = 50)
```

The elbow plot above shows some interesting PC influence behavior. There are some clusters PCs (like 4-7, 8-10, and 11-13) that make it less clear where the "elbow" of influence trend is. To be very safe, we can keep up to PC 25, where the trend approaches a horizontal line.

```{r}
cbmc <- FindNeighbors(cbmc, dims = 1:25)
cbmc <- FindClusters(cbmc, resolution = 0.8)
```
```{r}
cbmc <- RunTSNE(cbmc, dims = 1:25, method = "FIt-SNE")
```
```{r}
#| message: FALSE
cbmc_rna_markers <-
  FindAllMarkers(cbmc,
                 max.cells.per.ident = 100, logfc.threshold = log(2),
                 only.pos = TRUE, min.diff.pct = 0.3, verbose = FALSE)
```

The following cluster identities are provided for us from the authors of the paper. A cell-type classifier would need to be run on the data to label the bar-codes (droplets) with their identifiers.
```{r}
new.cluster.ids <- c("Memory CD4 T", "CD14+ Mono", "Naive CD4 T", "NK", "CD14+ Mono",
                    "Mouse", "B", "CD8 T", "CD16+ Mono", "T/Mono doublets", "NK", "CD34+",
                    "Multiplets", "Mouse", "Eryth", "Mk", "Mouse", "DC", "pDCs")
names(new.cluster.ids) <- levels(cbmc)
cbmc <- RenameIdents(cbmc, new.cluster.ids)
```

### Clustering t-SNE plot
```{r}
#| label: fig-tsne-plot-rna
#| fig-cap: tSNE plot of clustered and classified scRNA-seq data. The 18 cluster ids provided from authors of paper.
#| fig-height: 4
#| fig-width: 7

DimPlot(cbmc, label = TRUE, reduction = "tsne")
```

## Incorporate protein expression (antibody barcodes) to the Seurat object
```{r}
cbmc[["ADT"]] <- CreateAssayObject(counts = cbmc_adt)
```

The above code adds a new assay called "ADT" to the Seurat object `cmbc`. We can confirm it's added with the following `GetAssayData()` command.

```{r}
GetAssayData(cbmc, layer = "counts", assay = "ADT")[1:3,1:3]
```
```{r}
rownames(cbmc_adt)
```

Now we can repeat the pre-processing (normalization and scaling) steps that we typically run with RNA, but modifying the 'assay' argument.

(For CITE-seq data, the Broad does not recommend typical Log-normalization. Instead, they use a centered log-ratio (CLR) normalization, computed independently for each feature. This is a slightly improved procedure from the original publication.)

```{r}
cbmc <- NormalizeData(cbmc, assay = "ADT", normalization.method = "CLR")
```
```{r}
cbmc <- ScaleData(cbmc, assay = "ADT")
```

```{r}
DefaultAssay(cbmc) <- "RNA"
```

### Visualize protein levels on RNA clusters
```{r}
#| label: fig-adv-rna-tsne-a
#| fig-cap: "Set I: Juxtaposed heat map of cell-surface antibody-derived signal (top row) versus mRNA-seq (bottom row) of correspoding proteins and their mRNAs"
#| fig-height: 7
#| fig-width: 14
FeaturePlot(cbmc, features = c("adt_CD3", "adt_CD11c", "adt_CD8", "adt_CD16",
                               "CD3E", "ITGAX", "CD8A", "FCGR3A"),
            min.cutoff = "q05", max.cutoff = "q95", ncol = 4)
```

```{r}
#| label: fig-adv-rna-tsne-b
#| fig-cap: "Set II: Juxtaposed heat map of cell-surface antibody-derived signal (top row) versus mRNA-seq (bottom row) of correspoding proteins and their mRNAs"
#| fig-height: 7
#| fig-width: 18
# Compare gene and protein expression levels for the other 6 antibodies.
FeaturePlot(cbmc,
            features = c("adt_CD4", "adt_CD45RA", "adt_CD56",
                         "adt_CD14", "adt_CD19", "adt_CD34",
                         "CD4", "PTPRC", "NCAM1",
                         "CD14", "CD19", "CD34"),
            min.cutoff = "q05", max.cutoff = "q95", ncol = 6)
```

As we can see from the above figures @fig-adv-rna-tsne-a and @fig-adv-rna-tsne-b, in some cases, the same clusters / tSNE neighborhoods have high correspondence for the mRNA and the cell surface protein (*e.g.* CD3, CD4), but the penetrance (proportion of the cells) showing both antibody and mRNA feature may not be 100%; in other cases, some clusters expressing the cell-surface marker do not show much mRNA level (*e.g.* CD11, CD56, CD19, CD34), and vice-versa (*e.g.* CD45RA).

These side-by-side comparison illustrate the strength of the evidence added to the experiment by analyzing for both mRNA and protein.

```{r message = FALSE}
#| label: fig-adv-rna-joy
#| fig-cap: "Stacked density plots showing this distribution of antibody-derived tag (ADT) signal in each scRNA-seq cell class for four cell-sirface markers: CD3, CD11c, CD8, and CD16."
#| fig-width: 7.5
#| fig-height: 9
#| message: FALSE
RidgePlot(cbmc, features = c("adt_CD3", "adt_CD11c", "adt_CD8", "adt_CD16"), ncol = 2)
```

### Why may these differences occur?
One reason the "levels" between protein and mRNA could differ is that one of them is samples a very low count, and the normalization is concealing that fact.

```{r message = FALSE}
#| label: fig-norm-count-compare
#| fig-cap: "One gene, CD3, displayed as either antibody-derived tags (left side) or mRNA (right side), with x-axis in units of normalized expression (top half) or raw, un-normalized counts (bottom) for all cell classes."
norm_joy_plot_cd3 <- RidgePlot(cbmc, features = c("adt_CD3", "rna_CD3E"), ncol = 2) +
  patchwork::plot_annotation(subtitle = "Normalized expression levels")
count_joy_plot_cd3 <- RidgePlot(cbmc, features = c("adt_CD3", "rna_CD3E"), ncol = 2, layer = "counts") +
  patchwork::plot_annotation(subtitle = "Un-normalized NGS counts")

patchwork_plot_cd3 <- norm_joy_plot_cd3 / count_joy_plot_cd3

(patchwork_plot_cd3 <- patchwork_plot_cd3 +
  patchwork::plot_annotation(title = "Comparison of normalized and count data",
                             tag_levels = "a") &
    theme(axis.text = element_text(size = 5))
  )
```

As @fig-norm-count-compare shows, the raw counts (which are UMI-collapsed) of the antibody-derived tags has a very large dynamic range with large values (around 1000 to 2000 counts) for positive cells, whereas the mRNA raw counts shows discretization close to 0, with the plurality of cells in each classification having 0 counts, followed by 1, then 2, then 3... counts. This shows that a low number of mRNA molecules either present in the cells (or incorporated into the single cell NGS library) is limiting the *sensitivity* of the scRNA-seq method at identifying key transcripts in the cells; ADTs have far less of this problem, where there is a large difference (from ~ 0 to about 1000 counts) between negative and positive cells, suggesting the antibody method is less susceptible to Poisson / binomial sampling noise and uncertainty.

```{r}
#| label: fig-cd3-cd19-cor
#| fig-cap: "Scatter plot showing the correlation (in title) of CD3 vs CD19 antibody-derived tag (ADT) signal across ovserved cells."
FeatureScatter(cbmc, feature1 = "adt_CD19", feature2 = "adt_CD3", pt.size = 0.5, shuffle = TRUE)
```

@fig-cd3-cd19-cor shows that CD3 and CD19 are poorly correlated, with CD19 displaying high antibody signal in B cells, and CD3 showing higher signals in the T-cell classes (memory CD4+ T cells, naive CD4 T cells, and some T cell - monocyte doublets). This scatter plot of ADTs could function similarly to a flow plot, complete with gates.

```{r}
#| label: fig-cd3-cd4-cor
#| fig-cap: "Scatter plot showing the correlation (in title) of ADT to mRNA expression for CD3 and CD4 using both normalized data and direct count data"
patchwork_cor_plots <- (
  FeatureScatter(cbmc, feature1 = "adt_CD3", feature2 = "rna_CD3E", pt.size = 0.5, shuffle = TRUE, combine = TRUE) /
  FeatureScatter(cbmc, slot = "counts", feature1 = "adt_CD3", feature2 = "rna_CD3E",
                                        pt.size = 0.5, jitter = TRUE, combine = TRUE)
  ) | (
    FeatureScatter(cbmc, feature1 = "adt_CD4", feature2 = "rna_CD4", pt.size = 0.5, shuffle = TRUE, combine = TRUE) /
    FeatureScatter(cbmc, slot = "counts", feature1 = "adt_CD4", feature2 = "rna_CD4", pt.size = 0.5, jitter = TRUE, combine = TRUE)
    )
(patchwork_cor_plots <- patchwork_cor_plots +
    patchwork::plot_annotation(title = "Comparison of normalized and count data in scatter plot with correlation",
                             tag_levels = "a") +
    plot_layout(guides = "collect"))
```

### T-cell analysis
```{r}
#| label: fig-cd4-cd8-adt-scatters
#| fig-cap: "Scatter plot of antibody-derived tags (ADT) for CD4 and CD8 receptors, with normalized data in (a) and raw counts in (b)"
tcells <- subset(cbmc, idents = c("Naive CD4 T", "Memory CD4 T", "CD8 T"))

(FeatureScatter(tcells, feature1 = "adt_CD4", feature2 = "adt_CD8") |
  FeatureScatter(tcells, feature1 = "adt_CD4", feature2 = "adt_CD8", slot = "counts") ) +
  patchwork::plot_annotation(title = "Comparison of normalized and count data",
                             tag_levels = "a") +
    plot_layout(guides = "collect")
```

```{r}
ncol(subset(tcells, subset = adt_CD4 < 1 & adt_CD8 < 1)) / ncol(tcells)
```

In @fig-cd4-cd8-adt-scatters, the pearson correlation of CD4 and CD8 antibody CITE-seq signal is -0.79, indicating these are signals are significantly anti-correlated, which is consistent with the immunology of T cells vs B cells. While the normalized data (a) look pretty separate / disjoint, the count data (b) are even more orthogonal, though there is less space separating the clusters in b than in a.

```{r}
#| label: fig-cd4-cd8-rna-scatters
#| fig-cap: "Scatter plot of mRNA expression for CD4 and CD8, with normalized data in (a) and raw counts in (b)"
(FeatureScatter(tcells, feature1 = "rna_CD4", feature2 = "rna_CD8A", jitter = TRUE) |
   FeatureScatter(tcells, feature1 = "rna_CD4", feature2 = "rna_CD8A", slot = "counts", jitter = TRUE)) +
    patchwork::plot_annotation(title = "Comparison of normalized (a) and count data (b) of mRNA expression",
                             tag_levels = "a") +
    plot_layout(guides = "collect")
```

```{r}
ncol(subset(tcells, subset = rna_CD4 == 0 & rna_CD8A == 0)) / ncol(tcells)
```

The above plot @fig-cd4-cd8-rna-scatters shows the weakness of attempting to classify immune cells by rarely-expressed mRNAs alone (despite the corresponding gene product being definitional to the cell class) when measured by RNA expression; As high as 83% of the T-cells are double-negative for CD4 and CD8.

```{r}
DefaultAssay(tcells) <- "ADT"  # work with ADT count matrix
FeatureScatter(tcells, feature1 = "adt_CD4", feature2 = "adt_CD8")
```
```{r}
ncol(subset(tcells, subset = adt_CD4 < 1 & adt_CD8 < 1)) / ncol(tcells)
```

However, for surface antigen detection in CITE-seq, only 0.997% are double negative for CD4 protein and CD8 protein.

## Differential protein levels between clusters
Here, I sample 300 cells per cluster to enhance visualization.
```{r}
cbmc_subset <- subset(cbmc, downsample = 300)

# Find protein markers for all clusters, and draw a heatmap
adt_markers <- FindAllMarkers(cbmc_subset, assay = "ADT", only.pos = TRUE)
```

```{r}
#| fig-height: 8
#| fig-width: 7
DoHeatmap(cbmc_subset,
          features = unique(adt_markers$gene),
          assay = "ADT", angle = 90, size = 4) +
  guides(color = "none") +
  theme(axis.text.y = element_text(size = 14),
        strip.text = element_text(size = 2))
```

The unknown cells co-express both myeloid and lymphoid markers (true at the RNA level as well). They are likely cell clumps / multiplets that should be discarded.

### Cluster directly on protein levels
Keeping human cells only:
```{r}
cbmc <- subset(cbmc, idents = c("Multiplets", "Mouse"), invert = TRUE)
```
```{r}
DefaultAssay(cbmc) <- "ADT"
cbmc <-
  RunPCA(cbmc,
         features = rownames(cbmc),
         reduction.name = "pca_adt", reduction.key = "pcaadt_",
         verbose = FALSE)
```

I'm using `reduction.name` and `reduction.key`, because this is the second PCA being run on this multi-modal Seurat object, and I don't want the names to collide with the scRNA-seq PCA.

```{r}
DimPlot(cbmc, reduction = "pca_adt")
```

```{r}
ElbowPlot(cbmc)
```

```{r}
adt_data <- GetAssayData(cbmc, layer = "data")
adt_dist <- dist(t(adt_data))

cbmc[["rnaClusterID"]] <- Idents(cbmc)
```

```{r}
cbmc[["tsne_adt"]] <- RunTSNE(adt_dist, assay = "ADT", reduction.key = "adtTSNE_")
cbmc[["adt_snn"]] <- FindNeighbors(adt_dist)$snn
```

```{r}
cbmc <- FindClusters(cbmc, resolution = 0.2, graph.name = "adt_snn")
```

```{r}
( clustering_table <- table(Idents(cbmc), cbmc$rnaClusterID) )
```

<!-- ```{r} -->
<!-- # new_cluster_ids <- c("CD4 T", "CD14+ Mono", "NK", "B", -->
<!-- #                      "CD8 T", "NK", "CD34+", "T/Mono doublets", -->
<!-- #                      "CD16+ Mono", "pDCs", "B") -->
<!-- ``` -->

```{r}
new_cluster_ids <- levels(unique(cbmc$rnaClusterID))

names(new_cluster_ids) <- levels(cbmc)
```

```{r}
levels(unique(cbmc$rnaClusterID))
```

```{r}
names(new_cluster_ids)
```

```{r}
levels(cbmc)
```

```{r}
cbmc <- RenameIdents(cbmc, new_cluster_ids)
```

```{r}
#| label: fig-pairedtSNE
#| fig-cap: Juxtaposed tSNE plots of ADT (antibody) signal, colored and labeled by the data source indicated in the title (classification based on scRNA-seq in a; classification based on ADT signal in b).
#| fig-width: 8
#| fig-height: 5.5

tsne_rnaClusters <- DimPlot(cbmc, reduction = "tsne_adt", group.by = "rnaClusterID", pt.size = 0.5) +
  NoLegend() +
  ggtitle("Classification based on scRNA-seq") +
  theme(plot.title = element_text(size = 12, hjust = 0.5))

tsne_rnaClusters <- LabelClusters(plot = tsne_rnaClusters, id = "rnaClusterID", size = 4)

tsne_adtClusters <- DimPlot(cbmc, reduction = "tsne_adt", pt.size = 0.5) +
  NoLegend() +
  ggtitle("Classification based on ADT signal") +
  theme(plot.title = element_text(size = 12, hjust = 0.5))

tsne_adtClusters <- LabelClusters(plot = tsne_adtClusters, id = "ident", size = 4)

# Note: for this comparison, both the RNA and protein clustering are visualized on a tSNE
# generated using the ADT distance matrix.
( tsne_rna_adtClusters <- patchwork::wrap_plots(list(tsne_rnaClusters, tsne_adtClusters), ncol = 2) +
  plot_annotation(tag_levels = 'a') )
```
```{r eval = FALSE, include = FALSE}
ggsave(fs::path(out_path, "tsne_rna_adtClusters.png"), tsne_rna_adtClusters,
       dpi = 320, units = "in", width = 906/72/1.5, height = 603/72/1.5)
```

The tSNE clustering in @fig-pairedtSNE above is based on the distance matrix ADT (antibody) signal, whereas the coloring and cluster labels are, on the scRNA-seq data.

Overall, the ADT-driven clustering yields similar results. The compare / contrast conclusions are:

  - ADT clustering improves CD4/CD8 T cell group distinction, based on the robust, high-count ADT data for CD4, CD8, CD14, and CD45RA.
  - However, ADT-based clustering is worse for the Mk/Ery/DC cell-surface markers, and scRNA-seq distinguishes these populations better.
  - Some of the clusters are likely doublets, which have low confidence classifier calls in both the scRNA-seq and ADT methods. (However, scRNA-seq could have more features for more confident doublet identification and removal.)

